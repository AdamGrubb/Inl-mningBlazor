// <auto-generated />
using System;
using HorrorFlux.Membership.Database.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HorrorFlux.Membership.Database.Migrations
{
    [DbContext(typeof(HorrorFluxContext))]
    [Migration("20230208145433_newSeedData")]
    partial class newSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HorrorFlux.Membership.Database.Entities.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Directors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "James Gunn"
                        });
                });

            modelBuilder.Entity("HorrorFlux.Membership.Database.Entities.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("DirectorId")
                        .HasColumnType("int");

                    b.Property<string>("FilmPoster")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("FilmUrl")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<bool>("Free")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Release")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.ToTable("Films");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "After his wife falls under the influence of a drug dealer, an everyday guy transforms himself into Crimson Bolt, a superhero with the best intentions, but lacking in heroic skills.",
                            DirectorId = 1,
                            FilmPoster = "/MoviePoster/Super.png",
                            FilmUrl = "https://www.youtube.com/watch?v=tLj_Bzw8n90",
                            Free = true,
                            Release = new DateTime(2010, 10, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Super"
                        },
                        new
                        {
                            Id = 2,
                            Description = "A small town is taken over by an alien plague, turning residents into zombies and all forms of mutant monsters.",
                            DirectorId = 1,
                            FilmPoster = "/MoviePoster/Slither.png",
                            FilmUrl = "https://www.youtube.com/watch?v=SI0BcgVdSWg",
                            Free = false,
                            Release = new DateTime(2006, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Slither"
                        });
                });

            modelBuilder.Entity("HorrorFlux.Membership.Database.Entities.FilmGenre", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.HasKey("GenreId", "FilmId");

                    b.HasIndex("FilmId");

                    b.ToTable("FilmGenres", (string)null);

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            FilmId = 1
                        },
                        new
                        {
                            GenreId = 1,
                            FilmId = 2
                        },
                        new
                        {
                            GenreId = 2,
                            FilmId = 2
                        });
                });

            modelBuilder.Entity("HorrorFlux.Membership.Database.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sci-Fi"
                        });
                });

            modelBuilder.Entity("HorrorFlux.Membership.Database.Entities.SimilarFilms", b =>
                {
                    b.Property<int>("ParentFilmId")
                        .HasColumnType("int");

                    b.Property<int>("SimilarFilmId")
                        .HasColumnType("int");

                    b.HasKey("ParentFilmId", "SimilarFilmId");

                    b.HasIndex("SimilarFilmId");

                    b.ToTable("SimilarFilm");

                    b.HasData(
                        new
                        {
                            ParentFilmId = 1,
                            SimilarFilmId = 2
                        });
                });

            modelBuilder.Entity("HorrorFlux.Membership.Database.Entities.Film", b =>
                {
                    b.HasOne("HorrorFlux.Membership.Database.Entities.Director", "Director")
                        .WithMany("Films")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Director");
                });

            modelBuilder.Entity("HorrorFlux.Membership.Database.Entities.FilmGenre", b =>
                {
                    b.HasOne("HorrorFlux.Membership.Database.Entities.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HorrorFlux.Membership.Database.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("HorrorFlux.Membership.Database.Entities.SimilarFilms", b =>
                {
                    b.HasOne("HorrorFlux.Membership.Database.Entities.Film", "Film")
                        .WithMany("SimilarFilms")
                        .HasForeignKey("ParentFilmId")
                        .IsRequired();

                    b.HasOne("HorrorFlux.Membership.Database.Entities.Film", "SimilarFilm")
                        .WithMany()
                        .HasForeignKey("SimilarFilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("SimilarFilm");
                });

            modelBuilder.Entity("HorrorFlux.Membership.Database.Entities.Director", b =>
                {
                    b.Navigation("Films");
                });

            modelBuilder.Entity("HorrorFlux.Membership.Database.Entities.Film", b =>
                {
                    b.Navigation("SimilarFilms");
                });
#pragma warning restore 612, 618
        }
    }
}
